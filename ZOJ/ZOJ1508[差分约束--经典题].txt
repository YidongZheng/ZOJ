/*差分约束的经典题*/

#include<iostream>
#include<cstdio>

using namespace std;

struct Edge
{
    int from;
    int to;
    int weight;
}MyEdge[50002];

int D[50002];
bool Shortest_Path_Bellman(int T, int Max)
{
     int i,j,k;
     bool in;
     for(i=0;i<50002;i++) D[i]=0;
     for(i=1;i<=T;i++)
     {
         in=false;
         for(k=1;k<=T;k++)
         {
             if(D[MyEdge[k].to]>D[MyEdge[k].from]+MyEdge[k].weight)
                 D[MyEdge[k].to]=D[MyEdge[k].from]+MyEdge[k].weight,in=true;
         }
         for(k=Max;k>=1;k--)
         {
             if(D[k]<D[k-1])
                 D[k-1]=D[k],in=true;
         }
         for(k=1;k<=Max;k++)
         {
             if(D[k-1]<D[k]-1)
                 D[k]=D[k-1]+1,in=true;
         }
         if(!in) break;
     }
     //if(i==T||D[T]==0) return false;
     return true;
}
int main()
{
    int T,i,j;
    int Max;
    int a,b,c;
    //int A[50001],B[50001],C[50001];
    while(scanf("%d",&T)!=EOF)
    {
        Max=-1;
        for(i=1;i<=T;i++)
        {
          scanf("%d%d%d",&a,&b,&c);
          MyEdge[i].from=b+1;
          MyEdge[i].to=a;
          MyEdge[i].weight=-c;
          Max=Max>b+1?Max:b+1;
        }
        Shortest_Path_Bellman(T,Max);
        printf("%d\n",D[Max]-D[0]);
    }
    return 0;
}
