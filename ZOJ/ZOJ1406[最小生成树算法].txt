#include<iostream>
#include<cstdio>
#include<cstring>
#include<map>
#include<string>

using namespace std;
int Prim_MST(int Map[30][30], int N);
int main()
{
    int Map[30][30];
    int N,i,j;
    int edges;
    int weight;
    char temp[4];
    while(scanf("%d",&N) != EOF)
    {
        if(N == 0) break;
        for(i=0;i<N;i++)
          for(j=0;j<N;j++)
            Map[i][j]=0;
        for(i=0;i<N-1;i++)
        {
            scanf("%s",temp);
            scanf("%d",&edges);
            for(j=0;j<edges;j++)
            {
                scanf("%s",temp);
                scanf("%d",&weight);
                Map[i][temp[0]-'A']=Map[temp[0]-'A'][i]=weight;
            }
        }
        printf("%d\n",Prim_MST(Map,N));
        //for(i=0;i<N;i++){
          //for(j=0;j<N;j++)
             //printf("%d ",Map[i][j]);
          //printf("\n");}
    }
    return 0;
}

int Prim_MST(int Map[30][30], int N)
{
    bool Visited[30];
    memset(Visited,0,30);
    int MinPath[30];
    int i,j,k,Min;
    int Sum=0;
    for(i=0;i<N;i++)
      MinPath[i]=1000000;
      
    MinPath[0]=0;
    
    for(i=0;i<N;i++)
    {
        Min=-1;
        for(k=0;k<N;k++)
            if(!Visited[k] && (Min==-1 || MinPath[k]<MinPath[Min]))
               Min = k;
        Sum+=MinPath[Min];
        //printf("%d  %d\n",Min,Sum);
        Visited[Min]=true;
        for(k=0;k<N;k++)
        {
            if(!Visited[k] && Map[Min][k] != 0 && Map[Min][k]<MinPath[k])
            {
                MinPath[k] = Map[Min][k];
                //Path[k]=Min;
            }
        }
    }
    return Sum;
}

