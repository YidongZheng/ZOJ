/*BFS用于求最优解问题。带权最优解使用优先队列priority_queue解决。它的第二个模版类
有三个参数，第三个是less<type>或者greater<type>，对应大顶堆和小顶堆。可以自定义一个
类，重载括号函数，作为一个函数对象传入自己定义的比较函数*/
#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
int M,N,i,j;
int frix,friy,Min;
char Map[202][202];

class Point
{
public:
   int x;
   int y;
   int step;
   bool Visited;
   bool InQueue;
   Point():step(0),Visited(false),InQueue(false){}
   bool operator>(Point A)
   {
       if(this->step < A.step)
          return true;
       return false; 
  }
};
struct cmp
{
       bool operator()(const Point &t1,const Point &t2)
       {
            return t1.step>t2.step;//相当于less,大顶堆    
       }
};
Point PT[202][202];
void Rescue(int npx, int npy);
int main()
{
    while(scanf("%d%d",&N,&M)!=EOF)
    {   
        //memset(Map,0,40804);
        frix=friy=0;
        Min=100000;
        for(i=0;i<N;i++)
        {
            scanf("%s",Map[i]);
            for(j=0;j<M;j++)
            {
                PT[i][j].x=i;
                PT[i][j].y=j;
                PT[i][j].step=100000;
                PT[i][j].InQueue=false;
                PT[i][j].Visited=false;
                if(Map[i][j]=='r')
                {
                   frix=i;friy=j;
                }
            }
        }
        Rescue(frix,friy);
        
        if(Min != 100000)
           printf("%d\n",Min);
        else
           printf("Poor ANGEL has to stay in the prison all his life.\n");
       /* printf("\n");
        for(i=0;i<N;i++)
        {
            printf("%s\n",Map[i]);
        }
        printf("\n");*/
       // printf("%d %d\n",frix,friy);
    }
    return 0;
}
void Rescue(int npx, int npy)
{
     int step=0,tempstep=0;
     //printf("Hekk%d %d\n",npx,npy);
     priority_queue< Point,vector<Point>,greater<Point> > MyHeap;
     PT[npx][npy].step=0;
     MyHeap.push(PT[npx][npy]);
    
     while(!MyHeap.empty())
     {
        npx=MyHeap.top().x;
        npy=MyHeap.top().y;    
        //printf("Hekk%d %d\n",npx,npy);    
        tempstep=step=MyHeap.top().step;
        PT[npx][npy].Visited=true;
        MyHeap.pop();
        
        if(Map[npx][npy]=='a')
        {Min=step;return;}
        if(npx-1>=0 && !PT[npx-1][npy].Visited &&  Map[npx-1][npy]!='#')
        {
            //printf("Hello!3");
            tempstep++;
            if(Map[npx-1][npy]=='x')
               tempstep++;
            if(tempstep<PT[npx-1][npy].step)
               PT[npx-1][npy].step=tempstep;
            if(!PT[npx-1][npy].InQueue)
            {
               MyHeap.push(PT[npx-1][npy]);
               PT[npx-1][npy].InQueue=true;
            }
        }
        tempstep=step;
        if(npx+1<N && !PT[npx+1][npy].Visited&& Map[npx+1][npy]!='#')
        {
            //printf("Hello!1");
            tempstep++;
            if(Map[npx+1][npy]=='x')
               tempstep++;
            if(tempstep<PT[npx+1][npy].step)
               PT[npx+1][npy].step=tempstep;
            if(!PT[npx+1][npy].InQueue)
            {
               MyHeap.push(PT[npx+1][npy]);
               PT[npx+1][npy].InQueue=true;
            }
        }
        tempstep=step;
        if(npy-1>=0 && !PT[npx][npy-1].Visited && Map[npx][npy-1]!='#')
        {
           // printf("Hello!2");
            tempstep++;
            if(Map[npx][npy-1]=='x')
               tempstep++;
            if(tempstep<PT[npx][npy-1].step)
               PT[npx][npy-1].step=tempstep;
            if(!PT[npx][npy-1].InQueue)
            {
               //printf("Hello!2");
               //printf("\ntempstep:%d\n",tempstep);
               MyHeap.push(PT[npx][npy-1]);
              // printf("\nstep:%d\n",PT[npx][npy-1].step);
               PT[npx][npy-1].InQueue=true;
            }
        }
        tempstep=step;
        if(npy+1<M && !PT[npx][npy+1].Visited && Map[npx][npy+1]!='#')
        {
           //printf("Hello!5");
            tempstep++;
            if(Map[npx][npy+1]=='x')
               tempstep++;
            if(tempstep<PT[npx][npy+1].step)
               PT[npx][npy+1].step=tempstep;
            if(!PT[npx][npy+1].InQueue)
            {
               MyHeap.push(PT[npx][npy+1]);
               PT[npx][npy+1].InQueue=true;
            }
        }
     }
}
