#include <iostream>
#include <cstring>
#include <cstdio>
#include <queue>
#include <bitset>
using namespace std;

const int SIZE=101;

struct node{
	int id;
	double r;

	friend bool operator <(const node &a,const node &b){
		return a.r<b.r;
	}
}p,q;

int n,m,wei[SIZE];
double rate[SIZE][SIZE],r[SIZE];
bitset<SIZE> vis;

void Dijkstra(int u){
	int i;
	priority_queue<node> Q;

	memset(r,0,sizeof r); r[u]=1.0;
	vis.reset();

	p.id=u; p.r=1.0; Q.push(p);

	while(1){
		double MAX=-1.0;

		while(!Q.empty()){
			p=Q.top(); Q.pop();
			if(!vis.test(p.id)){
				MAX=p.r; break;
			}
		}

		if(MAX==-1.0) break;

		vis.set(p.id);

		double tmp;
		for(i=1;i<=n;++i){
			if(!vis.test(i) && rate[p.id][i]!=-1.0 && (tmp=rate[p.id][i]*p.r)>r[i]){
				q.id=i; q.r=r[i]=tmp; Q.push(q);
			}
		}
	}
}

int main(){
	int i,j;
	
	while(~scanf("%d %d",&n,&m)){
		for(i=1;i<n;++i) scanf("%d",&wei[i]);
		
		for(i=1;i<=n;++i)
			for(j=1;j<i;++j)
				rate[i][j]=rate[j][i]=-1.0;
		
		int u,v; double w;
		for(i=1;i<=m;++i){
			scanf("%d %d %lf",&u,&v,&w);

			if(rate[u][v]<1.0-w) rate[u][v]=rate[v][u]=1.0-w;
		}

		Dijkstra(n);

		double ans=0;
		for(i=1;i<n;++i) ans+=r[i]*wei[i];

		printf("%.2f\n",ans);
	}

	return 0;	
}



/*MY CODE BELOW*/

#include <stdio.h>
#include <string.h>

bool visited[105];
double distance[105];
int n,m;
int mass[105];
double graph[105][105];

void SP_dijkstra(int s)
{
	memset(visited,0,sizeof(visited));
	memset(distance,0,sizeof(distance));
	distance[s]=1;
	for(int i=0;i<n;++i)
	{
		double Max=0;
		int Maxv=-1;
		for(int j=0;j<n;++j)
		{
			if(!visited[j]&&(Maxv==-1||distance[j]>Max))
				Max=distance[j],Maxv=j;
		}
		visited[Maxv]=true;
		for(int j=0;j<n;++j)
		{
			if(!visited[j]&&distance[j]<distance[Maxv]*graph[Maxv][j])
				distance[j]=distance[Maxv]*graph[Maxv][j];
		}
	}
	
}

int main()
{
	while(~scanf("%d%d",&n,&m))
	{
		for(int i=0;i<n-1;++i)
			scanf("%d",&mass[i]);
		mass[n-1]=0;
		int tmps,tmpe;
		double tmpc;
		for(int i=0;i<n;++i)
			for(int j=0;j<n;++j)
				graph[i][j]=0;
		for(int i=0;i<m;++i)
		{
			scanf("%d%d%lf",&tmps,&tmpe,&tmpc);
			tmps--,tmpe--;
			if(graph[tmps][tmpe]<1-tmpc){
				graph[tmps][tmpe]=graph[tmpe][tmps]=1-tmpc;
			}
		}
		double Max=0;
		for(int i=0;i<n-1;++i)
			Max+=distance[i]*mass[i];
		printf("%.2lf\n",Max);
	}
	return 0;
}
