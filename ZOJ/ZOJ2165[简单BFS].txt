#include<iostream>
#include<cstdio>
#include<set>
#include<cmath>
#include<queue>
//ZOJ Problem Set - 2165    Red and Black    Time Limit: 2 Seconds      Memory Limit: 65536 KB
using namespace std;
char Map[22][22];
bool Visited[22][22];
bool InQueue[22][22];
int M,N;
class MyPoint
{
public:
      int x;
      int y;
}Point[22][22];

void BFS(int startx, int starty);
int main()
{
    
    int i,j;
    int startx,starty;
    int cnt;
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    while(scanf("%d%d",&N,&M)!=EOF)
    {
        if(M==0&&N==0) break;
        for(i=0;i<M;i++)
        {
            scanf("%s",Map[i]);
        }
        for(i=0;i<M;i++)
          for(j=0;j<N;j++)
          {
            if(Map[i][j]=='@')
            //{
              startx=i,starty=j;
              //printf("i:%d y:%d\n",startx,starty);
            //}
            Point[i][j].x=i;
            Point[i][j].y=j;
            Visited[i][j]=false;
            InQueue[i][j]=false;
          }
        BFS(startx,starty);
        cnt=0;
        for(i=0;i<M;i++)
          for(j=0;j<N;j++)
          {
            if(Visited[i][j])
              cnt++;
          }
        printf("%d\n",cnt);        
    }
    return 0;
}

void BFS(int startx, int starty)
{
    int x,y;
    queue<MyPoint> MyQueue;
    MyQueue.push(Point[startx][starty]);
    
    while(!MyQueue.empty())
    {
        x=MyQueue.front().x;
        y=MyQueue.front().y;
        MyQueue.pop();
        Visited[x][y]=true;
        //printf("x: %d  y:%d\n",x,y);
        if((x-1>=0)&&(Map[x-1][y]=='.')&&(!Visited[x-1][y])&&(!InQueue[x-1][y]))
        {
            InQueue[x-1][y]=true;
            MyQueue.push(Point[x-1][y]);
        }
        if((x+1<M)&&(Map[x+1][y]=='.')&&(!Visited[x+1][y])&&(!InQueue[x+1][y]))
        {
            InQueue[x+1][y]=true;
            MyQueue.push(Point[x+1][y]);             
        }
        if((y-1>=0)&&(Map[x][y-1]=='.')&&(!Visited[x][y-1])&&(!InQueue[x][y-1]))
        {
            InQueue[x][y-1]=true;
            MyQueue.push(Point[x][y-1]);             
        }
        if((y+1<N)&&(Map[x][y+1]=='.')&&(!Visited[x][y+1])&&(!InQueue[x][y+1]))
        {
            InQueue[x][y+1]=true;
            MyQueue.push(Point[x][y+1]);             
        }
    }     
}

//46341
