#include <cstdio>
#include <cstring>
#include <list>
#include <iostream>
#include <cmath>

using namespace std;

int n;
int intime[50001],outtime[50001];
int cntin=0,cntout=0;
int cnte=0,cntl=0;
int E[100001],R[50001],L[100001];
//int D[50001];
//int intop[50001];
list<int> graph[50001];
int dp[100001][20];
void ST()
{
    for(int i=0;i<cnte;++i)
        dp[i][0]=i;
    int m=(int)(log(1.0*cnte)/log(2.0));
    for(int j=1;j<=m;++j)
        for(int i=0;i<cnte;++i)
        {
            dp[i][j]=dp[i][j-1];
            int k=1<<(j-1);
            int a1 = dp[i][j-1];
            if(i+k<cnte){
                int a2 = dp[i+k][j-1];
                if(L[a1]>L[a2])
                    dp[i][j]=dp[i+k][j-1];
            }
        }
}
int rmq(int l, int r){
    int tmp;
    if(r<l)
    {
        tmp=r;
        r=l;
        l=tmp;
    }
    int k=(int)(log(1.0*(r-l+1))/log(2.0));
    int q1=dp[l][k];
    int q2=dp[r-(1<<k)+1][k];
    if(L[q1]<L[q2])
    {
        return E[q1];
    }
    else
        return E[q2];
}
void DFS(int u,int depth){
    R[u]=cnte;
    E[cnte]=u;
    L[cnte++]=depth;
    intime[u]=++cntin;
    list<int>::iterator it=graph[u].begin();
    for(;it!=graph[u].end();++it)
    {
        if(!intime[*it])
        {
            DFS(*it,depth+1);
            E[cnte]=u;
            L[cnte++]=depth;
        }
    }
    outtime[u]=++cntout;
}
bool isAncestor(int f, int s)
{
    if(intime[f]<intime[s]&&outtime[f]>outtime[s])
        return true;
    return false;
}
int main()
{
    int tmp=0;
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    while(~scanf("%d",&n))
    {
        if(tmp!=0)
            printf("\n");
        tmp++;
        printf("Case %d:\n",tmp);
        int s,e;
        cntin=0,cntout=0;
        cnte=0,cntl=0;
        memset(intime,0,sizeof(intime));
        memset(outtime,0,sizeof(outtime));
        memset(E,0,sizeof(E));
        memset(R,-1,sizeof(R));
        memset(L,0,sizeof(L));
        memset(dp,0,sizeof(dp));
        memset(D,0,sizeof(D));
        memset(intop,0,sizeof(intop));
        for(int i=0;i<n;++i)
        {
            graph[i].clear();
        }
        for(int i=0;i<n-1;++i)
        {
            scanf("%d%d",&s,&e);
            graph[s].push_back(e);
            graph[e].push_back(s);
        }
        DFS(0,0);
        }
        ST();
        int m;
        scanf("%d",&m);
        int a,b,c;
        for(int i=0;i<m;++i)
        {
            scanf("%d%d%d",&a,&b,&c);
            if((a == c) || (b == c))
            {printf("Yes\n");continue;}
            else if(a == b && a != c)
            {printf("No\n");continue;}
            if((isAncestor(c,a)&&!isAncestor(c,b))||
               (isAncestor(c,b)&&!isAncestor(c,a))){
                printf("Yes\n");
            else if(!isAncestor(c,a)&&!isAncestor(c,b))
            {
                printf("No\n");
            }
            else
            {
                if(rmq(R[a],R[b])==c)
                    printf("Yes\n");
                else
                    printf("No\n");
            }
        }
    }
    return 0;
}
